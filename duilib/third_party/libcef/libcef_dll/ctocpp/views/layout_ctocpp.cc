// Copyright (c) 2025 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f59aa48c4ee9e495d166d8d5c905b1ac77ad9ad9$
//

#include "libcef_dll/ctocpp/views/layout_ctocpp.h"

#include "libcef_dll/ctocpp/views/box_layout_ctocpp.h"
#include "libcef_dll/ctocpp/views/fill_layout_ctocpp.h"
#include "libcef_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
CefRefPtr<CefBoxLayout> CefLayoutCToCpp::AsBoxLayout() {
  shutdown_checker::AssertNotShutdown();

  auto* _struct = GetStruct();
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  auto* _retval = _struct->as_box_layout(_struct);

  // Return type: refptr_same
  return CefBoxLayoutCToCpp_Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
CefRefPtr<CefFillLayout> CefLayoutCToCpp::AsFillLayout() {
  shutdown_checker::AssertNotShutdown();

  auto* _struct = GetStruct();
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  auto* _retval = _struct->as_fill_layout(_struct);

  // Return type: refptr_same
  return CefFillLayoutCToCpp_Wrap(_retval);
}

NO_SANITIZE("cfi-icall") bool CefLayoutCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  auto* _struct = GetStruct();
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

CefLayoutCToCpp::CefLayoutCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

CefLayoutCToCpp::~CefLayoutCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
cef_layout_t*
CefCToCppRefCounted<CefLayoutCToCpp, CefLayout, cef_layout_t>::UnwrapDerived(
    CefWrapperType type,
    CefLayout* c) {
  if (type == WT_BOX_LAYOUT) {
    return reinterpret_cast<cef_layout_t*>(
        CefBoxLayoutCToCpp_Unwrap(reinterpret_cast<CefBoxLayout*>(c)));
  }
  if (type == WT_FILL_LAYOUT) {
    return reinterpret_cast<cef_layout_t*>(
        CefFillLayoutCToCpp_Unwrap(reinterpret_cast<CefFillLayout*>(c)));
  }
  CHECK(false) << __func__ << " called with unexpected class type " << type;
  return nullptr;
}

template <>
CefWrapperType CefCToCppRefCounted<CefLayoutCToCpp, CefLayout, cef_layout_t>::
    kWrapperType = WT_LAYOUT;
